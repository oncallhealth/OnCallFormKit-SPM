// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OnCallFormKit
import Combine
import Foundation
import MobileCoreServices
@_exported import OnCallFormKit
import SafariServices
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
public class OnCallParticipantModel : Swift.Equatable {
  public init(fullName: Swift.String, url: Swift.String)
  public static func == (lhs: OnCallFormKit.OnCallParticipantModel, rhs: OnCallFormKit.OnCallParticipantModel) -> Swift.Bool
  @objc deinit
}
@_Concurrency.MainActor(unsafe) public struct FormViewer : SwiftUI.View {
  public enum CompletionResult {
    case completedAllForms
    case skippedSomeForms
    case assignedForm
    case exit
    case noForms
    public static func == (a: OnCallFormKit.FormViewer.CompletionResult, b: OnCallFormKit.FormViewer.CompletionResult) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Mode : Swift.Equatable {
    case allForms
    case specific(formId: Swift.Int)
    case assign(formId: Swift.Int, participants: [OnCallFormKit.OnCallParticipantModel])
    public static func == (a: OnCallFormKit.FormViewer.Mode, b: OnCallFormKit.FormViewer.Mode) -> Swift.Bool
  }
  @_Concurrency.MainActor(unsafe) public init(mode: OnCallFormKit.FormViewer.Mode, authToken: Swift.String, domain: Swift.String, primaryColour: UIKit.UIColor, onComplete: ((OnCallFormKit.FormViewer.CompletionResult) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13OnCallFormKit0C6ViewerV4bodyQrvp", 0) __
}
public protocol FormViewerViewControllerDelegate : AnyObject {
  func didFinish(completionResult: OnCallFormKit.FormViewer.CompletionResult)
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class FormViewerViewController : SwiftUI.UIHostingController<OnCallFormKit.FormViewer> {
  @_Concurrency.MainActor(unsafe) public init(mode: OnCallFormKit.FormViewer.Mode, authToken: Swift.String, domain: Swift.String, primaryColour: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) weak final public var delegate: OnCallFormKit.FormViewerViewControllerDelegate?
  @objc deinit
}
extension OnCallFormKit.FormViewer.CompletionResult : Swift.Equatable {}
extension OnCallFormKit.FormViewer.CompletionResult : Swift.Hashable {}
